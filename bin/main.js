(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ChainManager, build_chain, build_text, manager;

ChainManager = require("./chain_manager.coffee");

manager = null;

window.onload = function() {
  manager = new ChainManager();
  document.querySelector("#start").onclick = build_chain;
  return document.querySelector("#print").onclick = build_text;
};

build_chain = function() {
  var k_val, text;
  k_val = document.querySelector("#kval").value;
  text = document.querySelector("#text").value;
  return manager.build_chain(text, k_val);
};

build_text = function() {
  var div, output;
  output = manager.generate_text(1000);
  div = document.querySelector("#output");
  return div.innerHTML = output;
};



},{"./chain_manager.coffee":2}],2:[function(require,module,exports){
var ChainManager, MarkovChain;

MarkovChain = require("./markov_chain.coffee");

ChainManager = (function() {
  ChainManager.chain = null;

  ChainManager.text = null;

  ChainManager.k = null;

  function ChainManager() {
    console.log("made new chain manager");
  }

  ChainManager.prototype.build_chain = function(text, k) {
    var i, j, key, ref, results, value;
    this.chain = new MarkovChain();
    this.text = text;
    this.k = parseInt(k, 10);
    results = [];
    for (i = j = 0, ref = text.length - this.k - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      key = text.substring(i, i + this.k);
      value = text.substring(i + 1, i + this.k + 1);
      results.push(this.chain.add_transition(key, value));
    }
    return results;
  };

  ChainManager.prototype.generate_text = function(M) {
    var i, j, output, ref, state;
    state = this.text.slice(0, this.k);
    output = "" + state;
    for (i = j = 0, ref = M - this.k; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      state = this.chain.next(state);
      if (state === -1 || (state == null)) {
        return output;
      }
      output = output + this.chain.last_char(state);
    }
    return output;
  };

  return ChainManager;

})();

module.exports = ChainManager;



},{"./markov_chain.coffee":3}],3:[function(require,module,exports){
var MarkovChain;

MarkovChain = (function() {
  MarkovChain.dict = null;

  function MarkovChain() {
    console.log("making new markov chain");
    this.dict = {};
  }

  MarkovChain.prototype.add_transition = function(v, w) {
    var base, base1;
    if ((base = this.dict)[v] == null) {
      base[v] = [];
    }
    this.dict[v].push(w);
    return (base1 = this.dict)[w] != null ? base1[w] : base1[w] = [];
  };

  MarkovChain.prototype.next = function(v) {
    var len, rand;
    len = this.dict[v].length;
    rand = Math.floor(Math.random() * len);
    return this.dict[v][rand];
  };

  MarkovChain.prototype.print = function() {
    var i, results;
    console.log("keys: ");
    results = [];
    for (i in this.dict) {
      results.push(console.log(i));
    }
    return results;
  };

  MarkovChain.prototype.last_char = function(v) {
    return v.slice(-1);
  };

  return MarkovChain;

})();

module.exports = MarkovChain;



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
